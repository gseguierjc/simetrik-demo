version: 0.2

env:
  variables:
    # Variables proporcionadas por el proyecto CodeBuild en Terraform
    AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
    ECR_REPO: "${ECR_REPO}"
    CLUSTER_NAME: "${CLUSTER_NAME}"

phases:
  install:
    runtime-versions:
      docker: 19
    commands:
      - echo "==> Sparse checkout s√≥lo del directorio grpc"
      - rm -rf *
      - git init
      - git remote add origin $CODEBUILD_SOURCE_REPO_URL
      - git config core.sparseCheckout true
      - |
        cat <<EOF > .git/info/sparse-checkout
        grpc/*
        EOF
      - git fetch --depth 1 origin $CODEBUILD_SOURCE_VERSION
      - git checkout $CODEBUILD_SOURCE_VERSION
      - echo "Sparse checkout completado"

  pre_build:
    commands:
      - echo "==> Obteniendo AWS_ACCOUNT_ID"
      - export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "==> Autenticando en ECR"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION \
          | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO

  build:
    commands:
      - echo "==> Construyendo y pusheando todos los servicios en grpc/"
      - |
        for dir in grpc/*/; do
          service=$(basename $dir)
          echo "Building $service"
          docker build -t $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO:$service-$CODEBUILD_RESOLVED_SOURCE_VERSION $dir
          docker push $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO:$service-$CODEBUILD_RESOLVED_SOURCE_VERSION
        done

  post_build:
    commands:
      - echo "==> Build finalizado a las $(date)"
      - echo "==> Actualizando kubeconfig de EKS"
      - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_DEFAULT_REGION
      - echo "==> Desplegando manifests de Kubernetes"
      - |
        for dir in grpc/*/k8s/; do
          kubectl apply -f $dir
        done

artifacts:
  files: []
