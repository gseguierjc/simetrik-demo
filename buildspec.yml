---
version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "647187952873"
    AWS_DEFAULT_REGION: "us-east-1"
    ECR_REPO_SERVER: "demo-app"
    ECR_REPO_CLIENT: "demo-app"
    GIT_REPO_URL: "https://github.com/gseguierjc/simetrik-demo"
    GIT_BRANCH: "main"

# Asegúrate de convertir finales de línea a LF antes de ejecutar.

phases:
  pre_build:
    commands:
      - echo "Instalando git si no está presente"
      - yum install -y git || echo "git ya instalado"
      - echo "Sparse-checkout de carpeta grpc"
      - mkdir project && cd project
      - git init
      - git remote add origin $GIT_REPO_URL
      - git config core.sparseCheckout true
      - printf 'grpc/*' >> .git/info/sparse-checkout
      - git pull --depth=1 origin $GIT_BRANCH
      - cd ..
      - mv project/grpc grpc
      - rm -rf project
      - echo "Creando directorio para certificados"
      - mkdir -p grpc/certs
 
      - echo "Generando CA y certificados TLS en grpc/certs"
      - openssl genrsa -out grpc/certs/ca.key 2048
      - openssl req -x509 -new -nodes -key grpc/certs/ca.key -sha256 -days 365 -subj "/C=PE/ST=Lima/L=Lima/O=MyOrg/OU=Dev/CN=MyCA" -out grpc/certs/ca.crt
      - openssl genrsa -out grpc/certs/service-server.key 2048
      - openssl req -new -key grpc/certs/service-server.key -subj "/C=PE/ST=Lima/L=Lima/O=MyOrg/OU=Dev/CN=service-server" -out grpc/certs/service-server.csr
      - openssl x509 -req -in grpc/certs/service-server.csr -CA grpc/certs/ca.crt -CAkey grpc/certs/ca.key -CAcreateserial -days 365 -sha256 -out grpc/certs/service-server.crt
      - openssl genrsa -out grpc/certs/service-client.key 2048
      - openssl req -new -key grpc/certs/service-client.key -subj "/C=PE/ST=Lima/L=Lima/O=MyOrg/OU=Dev/CN=service-client" -out grpc/certs/service-client.csr
      - openssl x509 -req -in grpc/certs/service-client.csr -CA grpc/certs/ca.crt -CAkey grpc/certs/ca.key -CAcreateserial -days 365 -sha256 -out grpc/certs/service-client.crt
  
      - echo "Login en Amazon ECR"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo "Definiendo URIs de repositorios"
      - export REPO_URI_SERVER=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_SERVER
      - export REPO_URI_CLIENT=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_CLIENT
  build:
    commands:
      - echo "Construyendo Docker image service-server"
      - docker build --build-arg CERT_DIR=certs -t $ECR_REPO_SERVER -f grpc/Dockerfile.server grpc
      - docker tag $ECR_REPO_SERVER:latest $REPO_URI_SERVER:latest
      - echo "Construyendo Docker image service-client"
      - docker build --build-arg CERT_DIR=certs -t $ECR_REPO_CLIENT -f grpc/Dockerfile.client grpc
      - docker tag $ECR_REPO_CLIENT:latest $REPO_URI_CLIENT:latest

  post_build:
    commands:
      - echo "Pushing imágenes a ECR"
      - docker push $REPO_URI_SERVER:server
      - docker push $REPO_URI_CLIENT:client
      - echo "Creando imagedefinitions.json"
      - printf '[{"name":"service-server","imageUri":"%s"}]' $REPO_URI_SERVER:server > imagedefinitions.json
      - printf '[{"name":"service-client","imageUri":"%s"}]' $REPO_URI_CLIENT:client >> imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
